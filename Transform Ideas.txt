There's a few choices. The 1st is concerning update frequency. Updates can either be fixed (once per frame), or whenever a getter on an outdated Transform is called. I like the idea of being able to leave out the update method, plus update check on get guarentees current information wheras fixed update has a chance of being one frame late. However, update it self is somewhat expensive (scale * rotation + translatiion). Thus we must be mindful of how often stuff changes. We know we're gonna need to get a Transform at least once per frame assuming we're rendering it, thus, active/rendered Transforms will need to be updated at least once per frame. Chances are we're not gonna be scaling frequently / more than once (I don't know a game where literally everything scales on a per-frame basis). Moreover, if we apply a scaling, we don't have to re-apply it in update, we can just cut to applying the rotaiton + transform. Translations and rotations are pretty frequent. Projectiles translate every frame, there's a chance they rotate as well in the event they're seeking a target. There's also a good chance collision repsonce happens frequently. Player input will be very frequent as well. Here's the thing. Will it make a difference to use the most up-to-date information vs per-frame information? It depends kind of on sequencing ie do we resolve 

1. Make a Transform that flags things for update on set, then calls update once per frame.
2. 