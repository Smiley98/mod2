Shader lifetimes shouldn't be tied to their programs.
What if two programs share the same vertex shader, but one dies?
We want to be able to share shaders.
Like any shared memory, all we have to do be careful of lifetimes.
Consider using shared pointers so that shaders don't die until all programs die.
Still not necessary. Lifetime is well-defined if we put all shaders in the same place/scope.
We can delete shader sources because shaders compile the source to binary for the gpu!
glDeleteShader() isn't concerned with the source though. The sources have been dying for quite some time. glDeleteShader() deletes the binary, which is not alright seeing as we want to re-use.

I think the only time we're okay to seemingly prematurely delete shaders is after linkage.
I *think* that the rule is, as long as a shader is attached to a program, it the binary won't be deleted. Rather, it simply gets queued for deletion (basically a shared pointer).
RESEARCH THIS!!!